<?xml version="1.0" encoding="UTF-8"?>
<faqs xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://maven.apache.org/FML/1.0"
  xsi:schemaLocation="http://maven.apache.org/FML/1.0 http://maven.apache.org/xsd/fml-1.0.xsd"
  id="FAQ" title="Frequently Asked Questions">
  <part id="Behavior">
    <title>What happens if ...</title>
    <faq id="no-metadata-json">
      <question>there is no Modulefile?</question>
      <answer>
        <p>
           The validation and publishing can still succeed provided that it finds a metadata.json.
        </p>
      </answer>
    </faq>
    <faq id="no-version">
      <question>there is no metadata.json file?</question>
      <answer>
        <p>
           The validation and publishing can still succeed provided that it finds a Modulefile that in turn does not contain complex ruby logic.
        </p>
      </answer>
    </faq>
    <faq id="no-version">
      <question>there is neither a Modulefile nor a metadata.json file?</question>
      <answer>
        <p>
          Since the scanner looks for those files, it will not find the module. If no modules are found, the build will fail.
        </p>
      </answer>
    </faq>
    <faq id="complex-logic">
      <question>the Modulefile contains complex ruby logic?</question>
      <answer>
        <p>
		  The <code>Modulefile</code> is expected to be Ruby syntax but it is never evaluated by Ruby. It's compiled using the jruby parser and the resulting abstract
		  syntax tree is then analyzed. Constructs that are not recognized are ignored. This means that although the file may contain complex logic, that logic
		  will never be evaluated. In essence, all such logic is comparable to <code>nil</code>.
        </p>
      </answer>
    </faq>
    <faq id="no-name">
      <question>the Modulefile/metadata.json has no name?</question>
      <answer>
        <p>
          The validation will consider lack of a module name to be an error. The build will end
          with an error.
        </p>
      </answer>
    </faq>
    <faq id="no-version">
      <question>the Modulefile/metadata.json has no version?</question>
      <answer>
        <p>
          The validation will consider lack of a module version to be an error. The build will end
          with an error.
        </p>
      </answer>
    </faq>
    <faq id="bad-json">
      <question>the metadata.json contains invalid JSON?</question>
      <answer>
        <p>
          The validation will consider an unparsable file to be an error. The build will end
          with an error.
        </p>
      </answer>
    </faq>
    <faq id="version-already-published">
      <question>a version of a module has already been published?</question>
      <answer>
        <p>
          The publisher will detect this and refrain from publishing. This is considered a normal condition.
        </p>
      </answer>
    </faq>
    <faq id="module-does-not-exist">
      <question>the module does not exist at the Forge?</question>
      <answer>
        <p>
          The Forge will reject any attempt to publish a version of a non-existent module. The build will end with
          an error explaining that the module was not found.
        </p>
      </answer>
    </faq>
    <faq id="module-wrong-owner">
      <question>the module owner does not match the publisher credentials?</question>
      <answer>
        <p>
          The Forge will reject any attempt to publish a module that is not owned by the publisher. The build will end
          en error with a 'Forbidden' message.
        </p>
      </answer>
    </faq>
  </part>
  <part id="Howto">
    <title>Solution to problems</title>
    <faq id="want-complex-logic">
      <question>I really want complex logic in the Modulefile. What should I do?</question>
      <answer>
        <p>
           Run the Puppet Module Tool on your module and commit the resulting metadata.json file. The plugin will then use that file instead of the Modulefile.
        </p>
      </answer>
    </faq>
  </part>
</faqs>
