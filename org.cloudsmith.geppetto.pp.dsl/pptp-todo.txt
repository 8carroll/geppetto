- DONE:
  Register Resource.Factory for ".rb" to enable loading of .rb as PPTP resources
  (Have not found a way to have multiple such registration using Xtext. The Builder is global and builds
  things that have a corresponding IResourceServiceProvider registered via an extension point. This registration
  only seems to be applicable for UI scenario).

- DONE: QualifiedNameProvider (same for both .rb and .pptp) types

- DONE: QualifiedNameConverter (same as for .pp)

- DONE: Implement executable extension for pptp/rb, must have separate injector and module
- DONE: Register an IResourceServiceProvider for ".rb" using executable extension
  
- DONE: Register an IResourceServiceProvider for ".pptp" to enable building .pptp files (automatically added to index).

- DONE: Modify the ResourceLinker to make use of the information in the index

- DONE: Create/Enforece a hidden project called .geppettp.pptp and copy the currently selected target (initially hardcoded
  but later via preferences).

- DONE: Must find links to captialized types (e.g. File instead of file).

- DONE: Make all PuppetNature projects depend on the hidden project

- DONE: Regenerate a PPTP after model changes took place

- Possibly make further simplifications to PPTP model

- Remember Links in an adapter

- Deprecate/remove the IPPTP and related management classes
  

- Since no .pptp files are typically found in any project, there needs to be a different mechanism for the 
  builder to find and react to changes (i.e. switching target platform). Maybe this is simply a resource set 
  that is loaded with the default .pptp (user then changes the content of this resource set) - but how does the
  builder understand this? (The default IAllContainerState is a mapping between projects and containers). Maybe a
  special container can be used?).
  
- after writing metadata.json do a refresh to avoid "out of sync"
  


- .pp affected by .rb and .pptp changes (rebuild)

Headless/Stand alone
- Builder does not run ? (Or a different one?) - everything in same resource set?
- How does containers work then? Dependencies?


IResourceServiceProvider
========================
Is not bound in a module, but has @ImplementedBy binding to DefaultResourceServiceProvider.
Likewise, the IResourceUIServiceProvider is bound by @ImplementedBy to DefaultResourceUIServiceProvider which via constructor
injection of bound IResourceServiceProvider wraps the default with additional Ui related services (for labels, etc.)

Thus, for xtext languages, there is no need for a special impl of IResourceServiceProvider, nor any binding.

